--Create date_dim table
create table date_dim (
	date_key integer not null primary key,
	date date not null,
	year smallint not null,
	month smallint not null,
	quarter smallint not null,
	week smallint not null,
	day smallint not null,
	is_weekend boolean
);

--Create customer_dim table
create table customer_dim (
	customer_key serial primary key,
	customer_id integer not null,
	active smallint not null,
	create_date timestamp not null,
	start_date date not null,
	end_date date,
	address2 varchar,
	address varchar not null,
	district varchar not null,
	city varchar not null,
	country varchar(50) not null,
	postal_code varchar,
	phone varchar(20) not null,
	first_name varchar(50) not null,
	last_name varchar(50) not null,
	email varchar(50),
);

--Create store_dim table
create table customer_dim (
	store_key serial primary key,
	store_id integer not null,
	start_date date not null,
	end_date date,
	address2 varchar,
	address varchar not null,
	district varchar not null,
	city varchar not null,
	country varchar(20) not null,
	postal_code varchar,
	manager_first_name varchar(50) not null,
	manager_last_name varchar(50) not null,
);

--Create film_dim table
create table film_dim (
	film_key serial primary key,
	film_id integer not null,
	length smallint
	release_year integer,
	rental_duration smallint not null,
	special_features varchar(60) not null,
	ratings varchar(10) not null,
	language varchar(20)not null,
	title varchar(255) not null,
	description text,
	orginial_language varchar(20)
);

--To get schema related information
select column_name,data_type,character_maximum_length,is_nullable from information_schema.columns where table_name = 'film_dim';

--Inserting data_dim
insert into date_dim 
(date_key, date, year, month, quarter, week,day,is_weekend)
select 
distinct (to_char(payment_date :: date, 'yyyyMMDD'):: integer) as date_key,
date(payment_date) as date,
extract(year from payment_date) as year,
extract(month from payment_date) as month,
extract(quarter from payment_date) as quarter,
extract(week from payment_date) as week,
extract(day from payment_date) as day,
case when 
extract(isodow from payment_date) in (6,7) 
then True
else False
END
from payment;

--Insert date into customer_dim
insert into customer_dim 
(customer_key,customer_id, first_name, last_name, email, 
 address, address2, district, city, country,
 postal_code,phone,active,create_date,start_date,end_date)
 select c.customer_id as customer_key,
 c.customer_id,
 c.first_name,
 c.last_name,
 c.email,
 a.address,
 a.address2,
 a.district,
 ci.city,
 co.country,
 a.postal_code,
 a.phone,
 c.active,
 c.create_date,
 now() as start_date,
 now() as end_date from customer c
 join address a on (c.address_id = a.address_id)
 join city ci on (a.city_id = ci.city_id)
 join country co on (ci.country_id = co.country_id);

--Insert data into store_dim
insert into store_dim 
(store_key,f_id, title, description, length, release_year, ratings, language, orginial_language, rental_duration, special_features)
 select f.film_id as film_key,
 f.film_id,
 f.title,
 f.description,
 f.length,
 f.release_year,
 f.rating,
 l.name,
 c.name,
 f.rental_duration,
 f.special_features
 from film f
 join language l on (f.language_id = l.language_id)
 join film_category fc on (f.film_id = fc.film_id)
 join category c on (fc.category_id= c.category_id);
 
 --Create sales_fact table
 create table sales_fact  (
	 sales_key serial primary key,
	 date_key integer references date_dim (date_key),
	 customer_key integer references customer_dim(customer_key),
	 film_key integer references film_dim(film_key),
	 store_key integer references store_dim(store_key),
	 sales_amount numeric
 );
 
 --Insert data into sales_fact 
 insert into sales_fact(date_key, customer_key, film_key, store_key, sales_amount)
 select 
 to_char(payment_date :: date, 'yyyyMMDD'):: integer as date_key,
 p.customer_id as customer_key,
 i.film_id as film_key,
 i.store_id as store_key,
 p.amount as sales_amount
 from payment p
 join rental r on (r.rental_id = p.rental_id)
 join inventory i on (r.inventory_id = i.inventory_id);
 
 
 --Analysing the revenue generated by each movie based on month and city for normal 3NF diagram
 select f.title, extract(month from p.payment_date) as month, c.city, sum(p.amount) as revenue from payment p
 join rental r on (p.rental_id = r.rental_id)
 join inventory i on (r.inventory_id = i.inventory_id)
 join film f on (f.film_id = i.film_id)
 join customer cu on (p.customer_id = cu.customer_id)
 join address a on (cu.address_id = a.address_id)
 join city c on (a.city_id = c.city_id)
 group by (f.title, month, c.city)
 order by f.title, month, c.city,sum(p.amount) desc;
 
 --Analysing the revnue generated by each movie based on month and city for changed 3NF -> star schema
 select film_dim.title, date_dim.month, customer_dim.city, sum(sales_amount) as revenue from sales_fact
 join film_dim  on (film_dim.film_key = sales_fact.film_key)
 join date_dim on (date_dim.date_key = sales_fact.date_key)
 join customer_dim on (customer_dim.customer_key = sales_fact.customer_key)
 group by film_dim.title, date_dim.month, customer_dim.city
 order by film_dim.title, date_dim.month, customer_dim.city, revenue desc;
 
 
--RESULT: Though not much difference, due to low amount of data, but the dimensional modelling query returned results faster than 3NF.